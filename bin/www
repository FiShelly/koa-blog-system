#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config = require('../config/server.config');
const app = require('../app.js');
const http = require('http');
const https = require('https');
const log4js = require('../middleware/logger');
const logger = log4js.getLogger('startup');
const fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || '80');

/**
 * Create HTTP server.
 */

let httpServer = null;
let httpsServer = null;

/**
 * Listen on provided port, on all network interfaces.
 */



if (config.useHttps) {
    httpsServer = https.createServer({
        key: fs.readFileSync(`${config.ssl.path}${config.ssl.key}`),
        cert: fs.readFileSync(`${config.ssl.path}${config.ssl.pem}`),
        passphrase: config.ssl.passphrase
    }, app.callback());

    httpsServer.listen(normalizePort(config.ssl.port || '443'));
    httpsServer.on('error', onError);
    httpsServer.on('listening', onListening);
    httpServer = http.createServer(function (req,res) {
        const url = req.url.substr(1);
        res.writeHead(200,{"Content-type":"text/html"});
        res.write(`<html><body><script>window.location.href='${config.host}${url}'</script></body></html>`);
        res.end();
    })
} else {
    httpServer = http.createServer(app.callback())
}

httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
    if (error.syscall !== 'listen') {
        logger.error('error: ' + error);
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            logger.error('error: ' + error);
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
    let addr = httpServer.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    logger.info('HTTP Listening on ' + bind);

    if (config.useHttps) {
        addr = httpsServer.address();
        logger.info('HTTPS Listening on ' + config.ssl.port);
    }
}
